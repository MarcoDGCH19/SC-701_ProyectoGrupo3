@using Connect4.Data
@using Connect4.Services
@using Microsoft.EntityFrameworkCore
@implements IDisposable

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthUserStateService AuthUserStateService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Grupo 1</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Inicio
            </NavLink>   
        </div>

        <AuthorizeView>

            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        @if (FotoPerfil != null)
                        {
                            <img src="data:image/png;base64,@FotoPerfil"
                                 alt="Perfil"
                                 class="rounded-circle me-2"
                                 style="width: 32px; height: 32px; object-fit: cover;" />
                        }
                        @NombreUsuario
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="NuevaPartida">
                        <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Juego
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="ranking">
                        <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Ranking
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Salir
                        </button>
                    </form>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="swagger-viewer">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Swagger
                    </NavLink>
                </div>

                @if (!IsOnNuevaPartida)
                {
                    <div class="nav-item px-3">
                        <label class="text-white">Estilo de Partículas:</label>
                        <select class="form-select" @bind="SelectedStyle">
                            <option value="PallaxParticles">PallaxParticles</option>
                            <option value="NasaParticles">NasaParticles</option>
                            <option value="PolygonParticles">PolygonParticles</option>
                        </select>
                    </div>
                }
            </Authorized>

            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Registro
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Ingreso
                    </NavLink>
                </div>
            </NotAuthorized>

        </AuthorizeView>

    </nav>
</div>

@code {
    private string? currentUrl;
    private string EstiloSeleccionado = "PallaxParticles";
    private bool _initialized = false;
    protected ApplicationUser? UsuarioActual;
    private string NombreUsuario = string.Empty;
    private string? FotoPerfil;

    private bool IsOnNuevaPartida =>
    NavigationManager.ToBaseRelativePath(NavigationManager.Uri).StartsWith("nuevapartida", StringComparison.OrdinalIgnoreCase);
    
    private string SelectedStyle
    {
        get => EstiloSeleccionado;
        set
        {
            if (EstiloSeleccionado != value)
            {
                EstiloSeleccionado = value;
                _ = SaveParticleStyleAsync(value);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AuthUserStateService.OnUserProfileChanged += UpdateProfileInfo;
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        var userId = await AuthUserStateService.GetUserIdAsync();
        if (string.IsNullOrEmpty(userId)) return;

        using var db = DbFactory.CreateDbContext();

        UsuarioActual = await db.Users
            .AsNoTracking()
            .FirstOrDefaultAsync(u => u.Id == userId);
        if (UsuarioActual != null)
        {
            NombreUsuario = UsuarioActual.Nombre;
            FotoPerfil = UsuarioActual.FotoBase64;
        }
        else
        {
            NombreUsuario = "Usuario Desconocido";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;

            var storedStyle = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "particleStyle");
            if (!string.IsNullOrWhiteSpace(storedStyle))
            {
                EstiloSeleccionado = storedStyle;
                StateHasChanged();
            }
        }
    }

    private async Task SaveParticleStyleAsync(string style)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "particleStyle", style);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private async void UpdateProfileInfo()
    {
        var userId = await AuthUserStateService.GetUserIdAsync();
        if (string.IsNullOrEmpty(userId)) return;

        using var db = DbFactory.CreateDbContext();
        var user = await db.Users.AsNoTracking().FirstOrDefaultAsync(u => u.Id == userId);
        if (user != null)
        {
            NombreUsuario = user.Nombre;
            FotoPerfil = user.FotoBase64;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        AuthUserStateService.OnUserProfileChanged -= UpdateProfileInfo;
    }

}


