@page "/ActualizaFoto"
@using Connect4.Data
@using Connect4.Models
@using Connect4.Services
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject AuthUserStateService AuthUserStateService

<div class="profile-photo-container">
    <div class="photo-upload-card">
        <h2 class="upload-title">Actualiza tu foto de perfil</h2>
        <p class="upload-subtitle">Sube una imagen que te represente</p>

        <div class="upload-area">
            @if (!string.IsNullOrEmpty(FotoBase64))
            {
                <div class="photo-preview">
                    <img src="data:image/png;base64,@FotoBase64" class="preview-image" />
                    <div class="photo-actions">
                        <button class="btn-save" @onclick="GuardarFoto">
                            <i class="fas fa-save"></i> Guardar cambios
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-user-circle empty-icon"></i>
                    <p>No hay foto seleccionada</p>
                </div>
            }

            <label class="file-upload-btn">
                <InputFile OnChange="HandleFotoUpload" class="file-input" style="display: none;" />
                <span class="btn-upload">
                    <i class="fas fa-cloud-upload-alt"></i> Seleccionar imagen
                </span>
            </label>
            <p class="file-requirements">
                Formatos aceptados: JPEG, PNG (Máx. 5MB)
            </p>
        </div>
    </div>
</div>

@code {
    private string? FotoBase64;
    private bool firstRender = true;

    private async Task HandleFotoUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        var allowedTypes = new[] { "image/jpeg", "image/png" };
        if (!allowedTypes.Contains(file.ContentType)) return;

        using var ms = new MemoryStream();
        await file.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
        FotoBase64 = Convert.ToBase64String(ms.ToArray());
        StateHasChanged();
    }

    private async Task GuardarFoto()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (string.IsNullOrEmpty(userName))
        {
            return;
        }

        await using var db = await DbFactory.CreateDbContextAsync();
        var usuario = await db.Users.FirstOrDefaultAsync(u => u.UserName == userName);

        if (usuario is null)
        {
            return;
        }

        usuario.FotoBase64 = FotoBase64;
        await db.SaveChangesAsync();
        AuthUserStateService.FotoBase64 = FotoBase64;
        AuthUserStateService.NotifyProfileChanged();
        StateHasChanged();

        Navigation.NavigateTo("/");
    }

    private async Task CargarFotoPredeterminadaSiNoExiste()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;

        if (string.IsNullOrEmpty(userName))
        {
            Navigation.NavigateTo("/Account/Login", true);
        }

        await using var db = await DbFactory.CreateDbContextAsync();
        var usuario = await db.Users.FirstOrDefaultAsync(u => u.UserName == userName);

        if (usuario is null)
        {
            return;
        }

        if (string.IsNullOrEmpty(usuario.FotoBase64))
        {
            var rutaAbsoluta = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", "DefaultProfilePic.png");

            if (File.Exists(rutaAbsoluta))
            {
                var bytes = await File.ReadAllBytesAsync(rutaAbsoluta);
                FotoBase64 = Convert.ToBase64String(bytes);

                usuario.FotoBase64 = FotoBase64;
                await db.SaveChangesAsync();
            }
        }
        else
        {
            FotoBase64 = usuario.FotoBase64;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CargarFotoPredeterminadaSiNoExiste();
            StateHasChanged();
        }
    }

}